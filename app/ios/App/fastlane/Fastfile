default_platform(:ios)

platform :ios do
  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
   app_store_connect_api_key(
     key_id: ENV["IOS_ASC_KEY_ID"],
     issuer_id: ENV["IOS_ASC_ISSUER_ID"],
     key_content: ENV["IOS_ASC_PRIVATE_KEY"],
     is_key_content_base64: true,
     in_house: false
   )
 end

  desc "Bump build number and version"
  lane :set_build_number_and_version do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    current_version = get_version_number()
    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )
    increment_build_number(
      build_number: (latest_build_number + 1),
    )
    increment_version_number(
      version_number: ENV["IOS_APP_VERSION"],
    )
  end

  desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
  lane :prepare_signing do |options|
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    keychain_name = "signing"
    keychain_password = "temp"

    delete_keychain(
      name: keychain_name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    import_certificate(
      certificate_path: ENV["IOS_SIGNING_KEY_FILE_PATH"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

    sigh(
      adhoc: options[:adhoc],
      api_key: api_key,
    )
  end

  desc "Build the iOS app for release"
  lane :build_release do |options|
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

  profile_name = "com.cf.furmeds AppStore"
  output_name = "furmeds"
  export_method = "app-store"

  update_code_signing_settings(
    use_automatic_signing: false,
    code_sign_identity: "iPhone Distribution",
    bundle_identifier: app_identifier,
    profile_name: profile_name,
    build_configurations: ["Release"]
  )

  gym(
    scheme: "App",
    output_name: output_name,
    configuration: "Release",
    export_options: {
      method: export_method,
      provisioningProfiles: {
        app_identifier => profile_name
      }
    }
  )
  end

  desc "Upload to TestFlight / ASC"
  lane :upload_release do
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

  deliver(
    api_key: api_key,
    skip_screenshots: true,
    skip_metadata: true,
    app_version: ENV["IOS_APP_VERSION"],
    force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
    run_precheck_before_submit: false, # not supported through ASC API yet
    release_notes: {
      'default' => ENV["RELEASE_NOTES"]
    }
  )
  end

  desc "Build and upload to TestFlight"
  lane :deploy do
    load_asc_api_key
    prepare_signing
    set_build_number_and_version
    build_release
    upload_release
  end
end
